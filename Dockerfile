# Dockerfile
# Это файл, содержащий набор инструкций, которые Docker выполняет для сборки образа.

# --- ЭТАП СБОРКИ (BUILD STAGE) ---
# Первый этап предназначен для сборки вашего React-приложения.
# Мы используем официальный образ Node.js (версия 18 на базе Alpine Linux),
# так как нам нужен Node.js и npm для сборки проекта.
FROM node:18-alpine AS build

# Устанавливаем рабочую директорию внутри контейнера.
# Все последующие команды (COPY, RUN) будут выполняться относительно этой директории.
WORKDIR /app

# Копируем файлы package.json и package-lock.json (или yarn.lock).
# Мы копируем их отдельно перед остальными файлами, чтобы Docker мог кэшировать
# слой установки зависимостей. Если эти файлы не меняются,
# Docker не будет заново выполнять 'npm install' при следующей сборке.
COPY package*.json ./

# Устанавливаем все зависимости проекта.
# Это может занять некоторое время.
RUN npm install

# Копируем все остальные файлы проекта из вашей текущей локальной директории ('.')
# в рабочую директорию контейнера ('./').
COPY . .

# Собираем React-приложение для продакшн-окружения.
# Эта команда выполняет сборку проекта, создавая оптимизированную
# для развертывания версию вашего приложения в папке 'build'.
RUN npm run build

# --- ЭТАП РАЗВЕРТЫВАНИЯ (DEPLOYMENT STAGE) ---
# Второй этап предназначен для раздачи собранного приложения.
# Мы используем очень легкий образ Nginx (веб-сервер),
# который идеально подходит для статических файлов, таких как React-приложение.
FROM nginx:alpine

# Копируем собранные статические файлы из ПРЕДЫДУЩЕГО ЭТАПА СБОРКИ ('--from=build').
# Папка '/app/build' - это результат 'npm run build' на первом этапе.
# Мы копируем их в директорию Nginx по умолчанию, откуда он будет их раздавать.
COPY --from=build /app/build /usr/share/nginx/html

# Копируем вашу пользовательскую конфигурацию Nginx.
# Этот файл 'nginx.conf' должен находиться рядом с Dockerfile в корне вашего проекта.
# Он указывает Nginx, как обрабатывать запросы для вашего SPA.
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Открываем порт 80 в контейнере.
# Это информирует Docker, что приложение внутри контейнера слушает на порту 80.
EXPOSE 80

# Команда, которая будет выполняться при запуске контейнера.
# Она запускает Nginx в фоновом режиме контейнера.
CMD ["nginx", "-g", "daemon off;"]
